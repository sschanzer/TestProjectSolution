using System;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using ProjectEulerProblems.Problems;

namespace TestProjectTests.ProjectEulerTests
{
	/// <summary>
	/// Test class for all of the Project Euler Problems.
	/// </summary>
	[TestClass]
	public class MasterTests
	{
        /// <summary>
        /// Project Euler Problem 1.
        /// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
        /// The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.
        /// </summary>
        [TestMethod]
		[TestCategory(TestList.ProjectEulerTests)]
        [DataRow(1000, 233168)]
        public void TestProjectEuler_Problem_One(int num, int answer)
		{
            var result = SumNums.GetSumSlick(num);
            Assert.AreEqual(answer, result);
        }

        /// <summary>
        /// Project Euler Problem 2.
        /// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
        /// By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        /// By considering the terms in the Fibonacci sequence whose values do not exceed four million,
        /// find the sum of the even-valued terms.
        /// </summary>
        [TestMethod]
        [TestCategory(TestList.ProjectEulerTests)]
        [DataRow(34,4613732)]
        public void TestProjectEuler_Problem_Two(int num, int answer)
        {
            var fib = new Fibonacci();
            var fibSum = fib.GetEvenFibSumRedux(num);

            Assert.AreEqual(answer, fibSum);
        }

        /// <summary>
        /// Project Euler Problem 3.
        /// The prime factors of $13195$ are $5, 7, 13$ and $29$.
        /// What is the largest prime factor of the number $600851475143$?
        /// </summary>
        [TestMethod]
        [TestCategory(TestList.ProjectEulerTests)]
        [DataRow(34, 4613732)]
        public void TestProjectEuler_Problem_Two()
        {
            var largestFactor = Primes.GetLargestPrimeFactors(600851475143);

            Assert.AreEqual(6857, largestFactor);
        }

        /// <summary>
        /// Project Euler Problem 4.
        /// A palindromic number reads the same both ways. The largest palindrome made from the product of two
        /// 2-digit numbers is 9009 = 91 * 99. Find the largest palindrome made from the product of two 3-digit numbers.
        /// </summary>
        [TestMethod]
        [TestCategory(TestList.ProjectEulerTests)]
        [DataRow(3, 906609)]
        public void TestProjectEuler_Problem_Four(int digits, long answer)
        {
            var palindromicNumbers = new PalindromicNumbers();
            long result = palindromicNumbers.GetLargestPalindromeProduct(digits);
            Assert.AreEqual(answer, result);
        }

        /// <summary>
        /// Project Euler Problem 5.
        /// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
        /// What is the smallest positive number that is evenly divisible with no remainder by all of the numbers from
        /// 1 to 20.
        /// </summary>
        [TestMethod]
        [TestCategory(TestList.ProjectEulerTests)]
        [DataRow(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }, 232792560)]

        public void TestProjectEuler_Problem_Five(int[] input, int answer)
        {
            var smallestMultiple = new SmallestMultiple();
            var result = smallestMultiple.FindSmallestMultiple(input.ToList());
            Assert.AreEqual(answer, result);
        }

        /// <summary>
        /// Project Euler Problem 6.
        /// The sum of the squares of the first ten natural numbers is, 1^2 + 2^2 + ... + 10^2 = 385.
        /// The square of the sum of the first ten natural numbers is, (1 + 2 + ... + 10)^2 = 55^2 = 3025.
        /// Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640.
        /// Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
        /// </summary>
        [TestMethod]
        [TestCategory(TestList.ProjectEulerTests)]
        [DataRow(100, 25164150)]
        public void TestProjectEuler_Problem_Six(int num, int answer)
        {
            int sumOfNumbersUpToNum = SumNums.SumOfMultiples(1, num);
            int sumOfSquares = SumNums.SumOfSquares(num);

            var squareOfSum = Math.Pow(sumOfNumbersUpToNum, 2);

            var difference = squareOfSum - sumOfSquares;

            Assert.AreEqual(answer, difference);
        }

        /// <summary>
        /// Project Euler Problem 7.
        /// By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6 th prime is 13.
        /// What is the 10001 st prime number?
        /// </summary>
        [TestMethod]
        [TestCategory(TestList.ProjectEulerTests)]
        [DataRow(10001, 104743)]
        public void TestProjectEuler_Problem_Seven(int bound, int expectedValue)
        {
            var primeList = Primes.PrimeSieveForNumberOfPrimes(bound);
            var primeCount = primeList.Count;

            Assert.AreEqual(expectedValue, primeList.Last());
        }

        /// <summary>
        /// Project Euler Problem 8.
        /// The four adjacent digits in the 1000-digit number that have the greatest product are 9 * 9 * 8 * 9 = 5832.
        /// 
        ///                     73167176531330624919225119674426574742355349194934
        ///                     96983520312774506326239578318016984801869478851843
        ///                     85861560789112949495459501737958331952853208805511
        ///                     12540698747158523863050715693290963295227443043557
        ///                     66896648950445244523161731856403098711121722383113
        ///                     62229893423380308135336276614282806444486645238749
        ///                     30358907296290491560440772390713810515859307960866
        ///                     70172427121883998797908792274921901699720888093776
        ///                     65727333001053367881220235421809751254540594752243
        ///                     52584907711670556013604839586446706324415722155397
        ///                     53697817977846174064955149290862569321978468622482
        ///                     83972241375657056057490261407972968652414535100474
        ///                     82166370484403199890008895243450658541227588666881
        ///                     16427171479924442928230863465674813919123162824586
        ///                     17866458359124566529476545682848912883142607690042
        ///                     24219022671055626321111109370544217506941658960408
        ///                     07198403850962455444362981230987879927244284909188
        ///                     84580156166097919133875499200524063689912560717606
        ///                     05886116467109405077541002256983155200055935729725
        ///                     71636269561882670428252483600823257530420752963450
        ///                         
        /// Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
        /// </summary>
        [TestMethod]
        [TestCategory(TestList.ProjectEulerTests)]
        [DataRow(34, 4613732)]
        public void TestProjectEuler_Problem_Eight()
        {
        }
    }
}
